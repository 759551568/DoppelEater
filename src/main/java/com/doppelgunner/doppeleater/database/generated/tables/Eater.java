/*
 * This file is generated by jOOQ.
*/
package com.doppelgunner.doppeleater.database.generated.tables;


import com.doppelgunner.doppeleater.database.generated.DefaultSchema;
import com.doppelgunner.doppeleater.database.generated.Keys;
import com.doppelgunner.doppeleater.database.generated.tables.records.EaterRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Eater extends TableImpl<EaterRecord> {

    private static final long serialVersionUID = 405557626;

    /**
     * The reference instance of <code>eater</code>
     */
    public static final Eater EATER = new Eater();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EaterRecord> getRecordType() {
        return EaterRecord.class;
    }

    /**
     * The column <code>eater.username</code>.
     */
    public final TableField<EaterRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>eater.email</code>.
     */
    public final TableField<EaterRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>eater.password</code>.
     */
    public final TableField<EaterRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>eater.bio</code>.
     */
    public final TableField<EaterRecord, String> BIO = createField("bio", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>eater.privacy</code>.
     */
    public final TableField<EaterRecord, byte[]> PRIVACY = createField("privacy", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>eater.gender</code>.
     */
    public final TableField<EaterRecord, byte[]> GENDER = createField("gender", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>eater.time_started</code>.
     */
    public final TableField<EaterRecord, String> TIME_STARTED = createField("time_started", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>eater.birthday</code>.
     */
    public final TableField<EaterRecord, String> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>eater.image</code>.
     */
    public final TableField<EaterRecord, byte[]> IMAGE = createField("image", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>eater</code> table reference
     */
    public Eater() {
        this("eater", null);
    }

    /**
     * Create an aliased <code>eater</code> table reference
     */
    public Eater(String alias) {
        this(alias, EATER);
    }

    private Eater(String alias, Table<EaterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Eater(String alias, Table<EaterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EaterRecord> getPrimaryKey() {
        return Keys.PK_EATER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EaterRecord>> getKeys() {
        return Arrays.<UniqueKey<EaterRecord>>asList(Keys.PK_EATER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Eater as(String alias) {
        return new Eater(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Eater rename(String name) {
        return new Eater(name, null);
    }
}
