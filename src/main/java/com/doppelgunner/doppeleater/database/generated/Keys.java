/*
 * This file is generated by jOOQ.
*/
package com.doppelgunner.doppeleater.database.generated;


import com.doppelgunner.doppeleater.database.generated.tables.Eaten;
import com.doppelgunner.doppeleater.database.generated.tables.Eater;
import com.doppelgunner.doppeleater.database.generated.tables.records.EatenRecord;
import com.doppelgunner.doppeleater.database.generated.tables.records.EaterRecord;

import javax.annotation.Generated;

import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code></code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<EatenRecord> PK_EATEN = UniqueKeys0.PK_EATEN;
    public static final UniqueKey<EaterRecord> PK_EATER = UniqueKeys0.PK_EATER;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<EatenRecord> PK_EATEN = createUniqueKey(Eaten.EATEN, "pk_eaten", Eaten.EATEN.FOODID);
        public static final UniqueKey<EaterRecord> PK_EATER = createUniqueKey(Eater.EATER, "pk_eater", Eater.EATER.USERNAME);
    }
}
